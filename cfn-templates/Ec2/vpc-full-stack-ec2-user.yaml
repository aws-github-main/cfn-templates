#Author: Birju
# template to create user defined vpc.
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-1853ac65
    us-west-1:
      AMI: ami-bf5540df
    eu-west-1:
      AMI: ami-3bfab942
    ap-southeast-1:
      AMI: ami-e2adf99e
    ap-southeast-2:
      AMI: ami-43874721
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Name
        Parameters:
          - VpcName
      - Label:
          default: VPC Availability Zones
        Parameters:
          - AvailabilityZone1
          - AvailabilityZone2
      - Label:
          default: Define Cidr Blocks
        Parameters:
          - VpcCidrBlock
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
Parameters:
  VpcName:
    Type: String
    Description: Enter VPC Name
  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone 1
  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone 2
  VpcCidrBlock:
    Type: String
    Description: VPC CIDR Blocks
    Default: "10.0.0.0/16"
  PublicSubnet1Cidr:
    Type: String
    Description: Public Subnet 1 CIDR
    Default: "10.0.1.0/24"
  PublicSubnet2Cidr:
    Type: String
    Description: Public Subnet 2 CIDR
    Default: "10.0.2.0/24"
  PrivateSubnet1Cidr: 
    Type: String
    Description: Private Subnet 1 CIDR
    Default: "10.0.11.0/24"
  PrivateSubnet2Cidr:
    Type: String
    Description: Private Subnet 2 CIDR    
    Default: "10.0.12.0/24"
Resources:
  DefaultVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VpcName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Join 
             - ""
             - - "Public Subnet 1"
               - ""
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: !Join 
            - ""
            - - "Public Subnet 2"
              - !Ref AvailabilityZone2  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Join 
            - ""
            - - "Private Subnet 1"
              - !Ref AvailabilityZone1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: !Join 
            - ""
            - - "Private Subnet 2"
              - !Ref AvailabilityZone2
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - "ec2 -"
              - !Ref AWS::StackName
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EC2 Security Group created by stack"
      GroupName: ec2-security-group-cfn
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "ec2-sg"
      VpcId: !Ref DefaultVPC