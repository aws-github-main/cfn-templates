#Author: Birju
# template to create user defined vpc.
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-1853ac65
    us-west-1:
      AMI: ami-bf5540df
    eu-west-1:
      AMI: ami-3bfab942
    ap-southeast-1:
      AMI: ami-e2adf99e
    ap-southeast-2:
      AMI: ami-43874721
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default:  Enter Ec2 Instance Name
        Parameters:
          - InstanceName
      - Label:
          default:  Enter Ec2 Instance Type
        Parameters:
          - InstanceType  
      - Label:
          default: Enter Vpc Id
        Parameters:
          - VpcIdUser
      - Label:
          default: Application Load Balancer Name
        Parameters:
          - albName
      - Label:
          default: ALB Security Group Name
        Parameters:
          - albSecurityGroupName
      - Label:
          default: Select subnets
        Parameters:
          - SubnetIds
Parameters:
  InstanceName:
    Type: String
    Default: alb-webserver-1
  InstanceType:
    Type: String
    Default: t2.micro
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description:  Select KeyPair Name
  VpcIdUser:
    Type: AWS::EC2::VPC::Id
    Description:  Select Vpc ID
  albSecurityGroupName:
    Type: String
    Description: Enter ALB Security Group
    Default: alb-ec2
  albName:
    Type: String
    Description: Enter Application Load Balancer Name
    Default: alb-sg
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select subnets
Resources:
  Ec2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /www/var/html/index.php:
              content: !Sub |
                <?php print "This is web server with application load balancer. "; ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                EnsureRunning: true
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - AMI
      KeyName: !Ref KeyPair
      SubnetId: subnet-41c1b126
      Tags:
        - Key: Name
          Value: !Ref InstanceName
      SecurityGroupIds:
        - !Ref SecurityGroup
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # confirm aws cfn is up-to-date
            yum install -y aws-cfn-bootstrap
            #install files and services from metadata 
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EC2 Security Group created by stack"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt AlbSecurityGroup.GroupId

      Tags:
          - Key: Name
            Value: "ec2-sg"
      VpcId: !Ref VpcIdUser
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref albName
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref  AlbSecurityGroup
      Subnets: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Ref albName
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
  AlbTargetGroup:
    Type:  AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcIdUser
      Targets:
        - Id: !Ref Ec2Instance
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcIdUser
      GroupDescription: ALB SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: 80
          FromPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: alb-sg-cft
Outputs:
  PublicDns:
    Description: The public DNS
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
  opVpcId:
    Description: The VPC created
    Value: !Ref VpcIdUser
  opAlbName:
    Description: The application load balancer name
    Value: !Ref albName 
  opImageId:
    Description: Image Id
    Value:
      Fn::FindInMap:
      - RegionMap
      - !Ref AWS::Region
      - AMI
  instanceName:
    Description: 'Ec2 Instance created by stack: '
    Value: !Sub '${AWS::StackName}'
  AlbSecurityGroup:
    Description:  ALB SecurityGroup
    Value: !Ref AlbSecurityGroup
  EC2InstanceSecurityGroup:
    Description: EC2 instance security group
    Value: !Ref SecurityGroup
    